/* ============================================================
   1) Garantir a tabela de auditoria (execute uma vez)
   ============================================================ */
IF DB_ID(N'BD_AUDITORIA') IS NULL
BEGIN
    RAISERROR('Banco BD_AUDITORIA não encontrado. Crie-o antes de continuar.', 11, 1);
    RETURN;
END;
GO
USE [BD_AUDITORIA];
GO
IF OBJECT_ID('dbo.Auditoria_Grants','U') IS NULL
BEGIN
    CREATE TABLE dbo.Auditoria_Grants
    (
        id              BIGINT IDENTITY(1,1) PRIMARY KEY,
        captured_at     DATETIME2(0) NOT NULL DEFAULT SYSUTCDATETIME(),
        database_name   SYSNAME      NOT NULL,
        principal_name  SYSNAME      NOT NULL,
        class_desc      NVARCHAR(60) NOT NULL,
        permission_name NVARCHAR(128) NOT NULL,
        grant_stmt      NVARCHAR(MAX) NOT NULL
    );
END
GO

/* ============================================================
   2) Gerar e coletar scripts para TODAS as bases
   ============================================================ */
DECLARE @db  SYSNAME;
DECLARE @sql NVARCHAR(MAX);

DECLARE dbs CURSOR LOCAL FAST_FORWARD FOR
    SELECT name
    FROM sys.databases
    -- Para excluir bases de sistema, descomente:
    -- WHERE name NOT IN ('master','model','msdb','tempdb')
    ORDER BY name;

OPEN dbs;
FETCH NEXT FROM dbs INTO @db;

WHILE @@FETCH_STATUS = 0
BEGIN
    SET @sql = N'
BEGIN TRY
    USE ' + QUOTENAME(@db) + N';

    /* ---------- PRINCIPALS → #principals (normalizando collation) ---------- */
    ;WITH principals AS
    (
        /* dpr.type: ''S''=SQL user, ''U''=Windows user, ''G''=Windows group
           dpr.authentication_type: 1=INSTANCE (tem login), 2=DATABASE (contained), 0=NONE */
        SELECT 
            DB_NAME()                                           AS database_name,
            (dpr.name COLLATE DATABASE_DEFAULT)                 AS principal_name,
            dpr.type                                            AS principal_type,
            dpr.authentication_type                             AS authentication_type,
            (sp.name COLLATE DATABASE_DEFAULT)                  AS server_login_name  -- pode ser NULL
        FROM sys.database_principals dpr
        LEFT JOIN sys.server_principals sp
               ON dpr.sid = sp.sid
        WHERE dpr.name NOT IN (N''public'',N''guest'')
          AND dpr.type IN (''S'',''U'',''G'')
    )
    SELECT * INTO #principals FROM principals;

    /* ---------- PREP (CREATE/ALTER USER) → #prep ---------- */
    SELECT
        DB_NAME() AS database_name,
        principal_name,
        CAST(N''USER'' AS NVARCHAR(60))   AS class_desc,
        CAST(N''SYNC'' AS NVARCHAR(128))  AS permission_name,
        CASE 
            WHEN authentication_type = 2 OR server_login_name IS NULL
                /* Contained: só ajusta DEFAULT_SCHEMA se existir; comenta se não existir */
                THEN
                N''USE '' + QUOTENAME(DB_NAME()) + N'';'' + CHAR(13)+CHAR(10) +
                N''IF USER_ID('' + QUOTENAME(principal_name COLLATE DATABASE_DEFAULT, '''''''') + N'') IS NULL'' + CHAR(13)+CHAR(10) +
                N''BEGIN'' + CHAR(13)+CHAR(10) +
                N''    /* ATENÇÃO: usuário contido '' + QUOTENAME(principal_name COLLATE DATABASE_DEFAULT) + N'' não existe; criação manual (contained) é necessária. */'' + CHAR(13)+CHAR(10) +
                N''END'' + CHAR(13)+CHAR(10) +
                N''ELSE'' + CHAR(13)+CHAR(10) +
                N''BEGIN'' + CHAR(13)+CHAR(10) +
                N''    ALTER USER '' + QUOTENAME(principal_name COLLATE DATABASE_DEFAULT) + N'' WITH DEFAULT_SCHEMA = [dbo];'' + CHAR(13)+CHAR(10) +
                N''END;''
            ELSE
                /* Vinculado a login do servidor: cria/remapeia e define DEFAULT_SCHEMA */
                N''USE '' + QUOTENAME(DB_NAME()) + N'';'' + CHAR(13)+CHAR(10) +
                N''IF SUSER_ID('' + QUOTENAME(server_login_name COLLATE DATABASE_DEFAULT, '''''''') + N'') IS NULL'' + CHAR(13)+CHAR(10) +
                N''BEGIN'' + CHAR(13)+CHAR(10) +
                N''    /* AVISO: login '' + QUOTENAME(server_login_name COLLATE DATABASE_DEFAULT) + N'' não existe no servidor. */'' + CHAR(13)+CHAR(10) +
                N''END'' + CHAR(13)+CHAR(10) +
                N''ELSE'' + CHAR(13)+CHAR(10) +
                N''BEGIN'' + CHAR(13)+CHAR(10) +
                N''    IF USER_ID('' + QUOTENAME(principal_name COLLATE DATABASE_DEFAULT, '''''''') + N'') IS NULL'' + CHAR(13)+CHAR(10) +
                N''        CREATE USER '' + QUOTENAME(principal_name COLLATE DATABASE_DEFAULT) + N'' FOR LOGIN '' + QUOTENAME(server_login_name COLLATE DATABASE_DEFAULT) + N'' WITH DEFAULT_SCHEMA = [dbo];'' + CHAR(13)+CHAR(10) +
                N''    ELSE'' + CHAR(13)+CHAR(10) +
                N''        ALTER USER '' + QUOTENAME(principal_name COLLATE DATABASE_DEFAULT) + N'' WITH LOGIN = '' + QUOTENAME(server_login_name COLLATE DATABASE_DEFAULT) + N'', DEFAULT_SCHEMA = [dbo];'' + CHAR(13)+CHAR(10) +
                N''END;''
        END AS grant_stmt
    INTO #prep
    FROM #principals;

    /* ---------- PERMS (GRANTs) → #perms (normalizando collation) ---------- */
    ;WITH cte_perms AS
    (
        SELECT 
            DB_NAME()                                  AS database_name,
            (dpr.name COLLATE DATABASE_DEFAULT)        AS principal_name,
            dp.class_desc,
            (dp.permission_name COLLATE DATABASE_DEFAULT) AS permission_name,
            N''USE '' + QUOTENAME(DB_NAME()) + N'';'' + CHAR(13)+CHAR(10) +
            CASE
                WHEN dp.class_desc = ''OBJECT_OR_COLUMN'' THEN
                    (dp.state_desc COLLATE DATABASE_DEFAULT) + N'' '' +
                    (dp.permission_name COLLATE DATABASE_DEFAULT) +
                    N'' ON '' + QUOTENAME((obj_sch.name COLLATE DATABASE_DEFAULT)) + N''.'' + QUOTENAME((o.name COLLATE DATABASE_DEFAULT)) +
                    N'' TO '' + QUOTENAME((dpr.name COLLATE DATABASE_DEFAULT))
                WHEN dp.class_desc = ''DATABASE'' THEN
                    (dp.state_desc COLLATE DATABASE_DEFAULT) + N'' '' +
                    (dp.permission_name COLLATE DATABASE_DEFAULT) +
                    N'' TO '' + QUOTENAME((dpr.name COLLATE DATABASE_DEFAULT))
                WHEN dp.class_desc = ''SCHEMA'' THEN
                    (dp.state_desc COLLATE DATABASE_DEFAULT) + N'' '' +
                    (dp.permission_name COLLATE DATABASE_DEFAULT) +
                    N'' ON SCHEMA :: '' + QUOTENAME(SCHEMA_NAME(dp.major_id) COLLATE DATABASE_DEFAULT) +
                    N'' TO '' + QUOTENAME((dpr.name COLLATE DATABASE_DEFAULT))
                WHEN dp.class_desc = ''TYPE'' THEN
                    (dp.state_desc COLLATE DATABASE_DEFAULT) + N'' '' +
                    (dp.permission_name COLLATE DATABASE_DEFAULT) +
                    N'' ON TYPE :: '' + QUOTENAME((s_types.name COLLATE DATABASE_DEFAULT)) + N''.'' + QUOTENAME((t.name COLLATE DATABASE_DEFAULT)) +
                    N'' TO '' + QUOTENAME((dpr.name COLLATE DATABASE_DEFAULT))
                WHEN dp.class_desc = ''CERTIFICATE'' THEN
                    (dp.state_desc COLLATE DATABASE_DEFAULT) + N'' '' +
                    (dp.permission_name COLLATE DATABASE_DEFAULT) +
                    N'' TO '' + QUOTENAME((dpr.name COLLATE DATABASE_DEFAULT))
                WHEN dp.class_desc = ''SYMMETRIC_KEYS'' THEN
                    (dp.state_desc COLLATE DATABASE_DEFAULT) + N'' '' +
                    (dp.permission_name COLLATE DATABASE_DEFAULT) +
                    N'' TO '' + QUOTENAME((dpr.name COLLATE DATABASE_DEFAULT))
                ELSE
                    N''ERROR: Unhandled class_desc: '' + dp.class_desc
            END AS grant_stmt
        FROM sys.database_permissions AS dp 
          JOIN sys.database_principals AS dpr ON dp.grantee_principal_id = dpr.principal_id
          LEFT JOIN sys.objects  AS o       ON dp.major_id = o.object_id
          LEFT JOIN sys.schemas  AS obj_sch ON o.schema_id = obj_sch.schema_id
          LEFT JOIN sys.types    AS t       ON dp.major_id = t.user_type_id
          LEFT JOIN sys.schemas  AS s_types ON t.schema_id = s_types.schema_id
        WHERE dpr.name NOT IN (N''public'',N''guest'')
    )
    SELECT * INTO #perms FROM cte_perms;

    /* ---------- Persistir na auditoria ---------- */
    INSERT INTO BD_AUDITORIA.dbo.Auditoria_Grants
        (captured_at, database_name, principal_name, class_desc, permission_name, grant_stmt)
    SELECT SYSUTCDATETIME(), database_name, principal_name, class_desc, permission_name, grant_stmt
    FROM #prep
    ORDER BY principal_name;

    INSERT INTO BD_AUDITORIA.dbo.Auditoria_Grants
        (captured_at, database_name, principal_name, class_desc, permission_name, grant_stmt)
    SELECT SYSUTCDATETIME(), database_name, principal_name, class_desc, permission_name, grant_stmt
    FROM #perms
    ORDER BY principal_name, class_desc, permission_name;

END TRY
BEGIN CATCH
    /* opcional: log local
    SELECT ERROR_NUMBER() AS ErrNo, ERROR_MESSAGE() AS ErrMsg, DB_NAME() AS DbName;
    */
END CATCH;
';

    EXEC sys.sp_executesql @sql;

    FETCH NEXT FROM dbs INTO @db;
END

CLOSE dbs;
DEALLOCATE dbs;

/* ============================================================
   3) Consultas úteis
   ============================================================ */
-- Ver tudo:
 SELECT * 
 FROM BD_AUDITORIA.dbo.Auditoria_Grants
 ORDER BY captured_at DESC, database_name, principal_name;

-- Extrair somente o texto dos comandos (na ordem):
-- SELECT grant_stmt
-- FROM BD_AUDITORIA.dbo.Auditoria_Grants
-- ORDER BY captured_at, database_name, principal_name, class_desc, permission_name;
